#!/bin/bash

function get_unit_file(){
    
     local UNIT=$1

     for DIR in ${UNIT_PATHS[@]} ; do
         if [ -f "${DIR}${UNIT}" ] ; then
             echo "${DIR}${UNIT}"
             break
         fi
     done

}

function read_option(){
     local OPTION="$1"
     local FILE="$2"

     grep -oP '(?<='$OPTION').*' "$FILE" | cut -d '=' -f2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

function get_unit_wants() {

     local UNIT_FILE=$1
     local UNIT=`basename $UNIT_FILE`

     sort -u <<< `(
         # Print wants from UNIT_PATHS
         for DIR in ${UNIT_PATHS[@]} ; do
             if [ -d "${DIR}${UNIT}.wants" ] ; then
                 ls -1 "${DIR}${UNIT}.wants/" | tr '\n' ' '
             fi
         done
    
         # Print wants from unit-file
#         grep -oP '(?<=Wants).*' $UNIT_FILE | cut -d '=' -f2-
         read_option Wants $UNIT_FILE
     )`
}

function action_start(){

    # Find depended services
    local UNIT_FILE=$1
    local UNIT_WANTS=(`get_unit_wants $1`)

    # Start depended services
    for UNIT in ${UNIT_WANTS[@]}; do
        exec_action start $UNIT
    done

    # Load options 
    local Type=`grep -oP '(?<=Type).*' $UNIT_FILE | cut -d '=' -f2-`
    local ExecStart=`grep -oP '(?<=ExecStart).*' $UNIT_FILE | cut -d '=' -f2-`

    # Start service 
    if [ -z $Type ] || [[ "${Type,,}" == *"simple"* ]] ; then
        echo "nohup $ExecStart >>/dev/null &"
        #eval "nohup $ExecStart >>/dev/null &"
    elif [[ "${Type,,}" == *"forking"* ]] || [[ "${Type,,}" == *"oneshot"* ]] ; then
        echo "$ExecStart"
        #eval "$ExecStart"
    else
        >&2 echo "Unknown service type $Type"
    fi

}

function action_enable(){

    local UNIT_FILE=$1
    local UNIT=`basename $UNIT_FILE`

#    local WantedBy=`grep -oP '(?<=WantedBy).*' $UNIT_FILE | cut -d '=' -f2-`
    local WantedBy=`read_option WantedBy $UNIT_FILE`

    if [ -z $WantedBy ] ; then
        >&2 echo "Unit $UNIT have no WantedBy option."
        exit 1
    fi
    
    local WANTEDBY_DIR="/etc/systemd/system/$WantedBy.wants"

    if [ ! -f "$WANTEDBY_DIR/$UNIT" ] ; then
        mkdir -p $WANTEDBY_DIR
        echo Created symlink from $WANTEDBY_DIR/$UNIT to $UNIT_FILE.
        #ln -s $WANTEDBY_DIR/$UNIT $UNIT_FILE
    fi
    
}
    
function action_disable(){

    local UNIT_FILE=$1
    local UNIT=`basename $UNIT_FILE`

#    local WantedBy=`grep -oP '(?<=WantedBy).*' $UNIT_FILE | cut -d '=' -f2-`
    local WantedBy=`read_option WantedBy $UNIT_FILE`

    if [ -z $WantedBy ] ; then
        >&2 echo "Unit $UNIT have no WantedBy option."
        exit 1
    fi

    local WANTEDBY_DIR="/etc/systemd/system/$WantedBy.wants"

    if [ -f "$WANTEDBY_DIR/$UNIT" ] ; then
        echo Removed $WANTEDBY_DIR/$UNIT.
        #rm -f $WANTEDBY_DIR/$UNIT.
        rmdir --ignore-fail-on-non-empty $WANTEDBY_DIR
    fi
    
}

function exec_action(){

    local ACTION=$1
    local UNIT=$2
    
    [[ $UNIT =~ '.' ]] || UNIT="$UNIT.service"

    UNIT_FILE=`get_unit_file $UNIT`

    if [ -z $UNIT_FILE ] ; then
        >&2 echo "Failed to $ACTION $UNIT: Unit $UNIT not found."
        exit 1
    else
        case "$ACTION" in
            start )     action_start $UNIT_FILE ;;
            enable )    action_enable $UNIT_FILE ;;
            disable )   action_disable $UNIT_FILE ;;
            * ) >&2 echo "Unknown operation $ACTION." ; exit 1 ;;
        esac
    fi
}

ACTION="$1"
UNITS="${@:2}"
UNIT_PATHS=(
    /etc/systemd/system/
    /usr/lib/systemd/system/
)


for UNIT in ${UNITS[@]}; do
    exec_action $ACTION $UNIT
done
